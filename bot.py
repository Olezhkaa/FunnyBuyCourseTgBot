import logging

import telebot
from telebot import types
from telebot.types import PreCheckoutQuery
import tracemalloc

from config import TOKEN
import webbrowser
from database import *
from payments.donation import send_donation, bot_send_invoice_donation
from payments.programmingCourse import *
from payments.designerCourse import *

bot = telebot.TeleBot(TOKEN)

name_operation_sale = ""

tracemalloc.start()

init_db()

@bot.message_handler(commands=['start'])
def send_command_start(message):

    add_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name)

    username = message.from_user.first_name
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç!", callback_data="programmer_me"))
    markup.add(types.InlineKeyboardButton("–î–∏–∑–∞–π–Ω–µ—Ä...", callback_data="designer_me"))
    markup.add(types.InlineKeyboardButton("–û—Ñ–∏—Å–Ω—ã–π –∂–æ–ø–æ–ª–∏–∑", callback_data="office_ass_me"))
    markup.add(types.InlineKeyboardButton("–†–∞–±–æ—Ç—è–≥–∞", callback_data="worker_me"))
    pretty_boy_btn = types.InlineKeyboardButton("–ö—Ä–∞—Å–∞–≤—á–∏–∫", callback_data="pretty_boy_me")
    good_man_btn = types.InlineKeyboardButton("–•–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫", callback_data="good_man_me")
    markup.row(pretty_boy_btn, good_man_btn)
    bot.reply_to(message, f"–¢—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–ª –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏...?\n–õ–∞–¥–Ω–æ...\n{username}, —Ç—ã –∫—Ç–æ –ø–æ –∂–∏–∑–Ω–∏?", reply_markup=markup)

@bot.message_handler(commands=['paysupport'])
def handle_pay_support(message):
    bot.send_message(
        message.chat.id,
        "–î–µ–Ω–µ–≥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.\n–ú–∞—Ç–µ—Ä–∏—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç—É—Ç: @Olezhka_TG. üò≠üòÇ"
    )

@bot.message_handler(commands=['help'])
def send_command_help(message):
    bot.reply_to(message, '–ù–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç"')

@bot.message_handler(commands=['site', 'web'])
def send_command_site(message):
    webbrowser.open("https://music.yandex.ru/home")

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    username = message.from_user.first_name
    if message.text == "–ü—Ä–∏–≤–µ—Ç" or message.text == "/hi":
        bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {username}\n–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É!")
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")

@bot.message_handler(content_types=['audio'])
def get_audio_messages(message):
    username = message.from_user.first_name
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É", url="https://music.yandex.ru/home"))
    bot.send_message(message.from_user.id, f"{username}, —è –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è —Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ ;(", reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def get_photo_messages(message):
    username = message.from_user.first_name
    bot.send_message(message.from_user.id, f"{username}, –∫–ª–∞—Å—Å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!\n–ñ–∞–ª—å —è –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ ;(")

@bot.callback_query_handler(func=lambda call: call.data == "donation_1")
def handle_buy_donation(call):
    global name_operation_sale
    name_operation_sale = "donation"

    amount = 1
    bot_send_invoice_donation(call, amount)
@bot.callback_query_handler(func=lambda call: call.data == "donation_2")
def handle_buy_donation(call):
    global name_operation_sale
    name_operation_sale = "donation"

    amount = 10
    bot_send_invoice_donation(call, amount)
@bot.callback_query_handler(func=lambda call: call.data == "donation_3")
def handle_buy_donation(call):
    global name_operation_sale
    name_operation_sale = "donation"

    amount = 100
    bot_send_invoice_donation(call, amount)
@bot.callback_query_handler(func=lambda call: call.data == "donation_4")
def handle_buy_donation(call):
    global name_operation_sale
    name_operation_sale = "donation"

    amount = 1000
    bot_send_invoice_donation(call, amount)


@bot.callback_query_handler(func=lambda call: call.data == "send_by_programing_course")
def handle_buy_programming_course(call):
    send_by_programming_course(call)
@bot.callback_query_handler(func=lambda call: call.data == "buy_programming_course")
def handle_buy_programming_course(call):
    global name_operation_sale
    name_operation_sale = "programingCourse"

    amount = 1000
    bot_send_invoice_buy_programming_course(call, amount)

@bot.callback_query_handler(func=lambda call: call.data == "send_by_designer_course")
def handle_buy_designer_course(call):
    send_by_designer_course(call)
@bot.callback_query_handler(func=lambda call: call.data == "buy_designer_course")
def handle_buy_designer_course(call):
    global name_operation_sale
    name_operation_sale = "designerCourse"

    amount = 2500
    bot_send_invoice_buy_designer_course(call, amount)

@bot.callback_query_handler(func=lambda call: call.data == "my_courses")
def my_course_callback(call):
    markup = types.InlineKeyboardMarkup()
    bot.delete_message(call.message.chat.id, call.message.message_id)
    courses_list = get_all_courses_by_user_id(call.message.chat.id)
    if courses_list.__len__() != 0:
        for i in courses_list:
            markup.add(types.InlineKeyboardButton(f"{i[2]}", "https://sun9-80.userapi.com/8zqyhREWsi1TzpRPrJpYMJaqFU4LyXWHqBje_Q/eZnYICLEW_U.jpg"))
        bot.send_message(call.message.chat.id,"–ö—Ä–∞—Å–∞–≤—á–∏–∫! –í–∏–∂—É, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∏–º–µ—é—Ç—Å—è.\n–í–æ—Ç, —Ç–≤–æ–∏ –∫—É—Ä—Å—ã: ", reply_markup=markup)
    else: bot.send_message(call.message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∫—É–ø–ª–µ–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n–ù–∏—â–µ–±—Ä–æ–¥!")


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    username = callback.message.chat.first_name
    bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data == "programmer_me": send_btn_programmer_me(callback)
    elif callback.data == "designer_me": send_btn_designer_me(callback)
    elif callback.data == "office_ass_me":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://life.ru/p/1640928?ysclid=m570z51f6e464129509"))
        bot.send_message(callback.message.chat.id, f"{username}...\n–ò –∫–∞–∫ –Ω–∞ –≤–∫—É—Å?\n–ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª, —Ç–æ –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n–ù–æ –∑–Ω–∞–π, —Ç—ã —É–ø–∞–ª –≤ –º–æ–∏—Ö –≥–ª–∞–∑–∞—Ö.", reply_markup=markup)
    elif callback.data == "worker_me":
        file_image = open('image/worker_girl.jpg', 'rb')
        file_audio_dora = open('audio/dora_Loverboy.mp3', 'rb')
        file_audio_neksyusha = open('audio/neksyusha_Zavodskaya.mp3', 'rb')
        bot.send_photo(callback.message.chat.id, file_image)
        bot.send_message(callback.message.chat.id, f"{username}, —á—Ç–æ —Ç—ã —Ç—É—Ç –¥–µ–ª–∞–µ—à—å?\n–•–æ—á—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫!\n–ù–∏ –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω—ã.\n–ü–æ—Å–ª—É—à–∞–π —ç—Ç–∏ —Ç—Ä–µ–∫–∏ –∏ —Ä–∞–¥—É–π—Å—è –∂–∏–∑–Ω–∏.")
        bot.send_audio(callback.message.chat.id, file_audio_dora)
        bot.send_audio(callback.message.chat.id, file_audio_neksyusha)
    elif callback.data == "good_man_me": send_good_man_me(callback)
    elif callback.data == "pretty_boy_me": send_pretty_boy_me(callback)
    elif callback.data == "all_users_list": all_users_view(callback)
    elif callback.data == "delete_me": delete_user(callback.message.chat.id)
    else: bot.send_message(callback.message.chat.id, f"–î—É—Ä–Ω–æ–π?\n–§—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞. –û—Ç–¥—ã—Ö–∞–π!")

def send_btn_programmer_me(callback):
    username = callback.message.chat.first_name
    markup = types.InlineKeyboardMarkup()
    c_plus_btn = types.InlineKeyboardButton("–°++", "https://metanit.com/cpp/tutorial/?ysclid=m56xkq8ebe923014352")
    c_sharp_btn = types.InlineKeyboardButton("–°#", "https://metanit.com/sharp/tutorial/?ysclid=m56xlhy3ln754950314")
    java_btn = types.InlineKeyboardButton("Java", "https://metanit.com/java/tutorial/1.1.php?ysclid=m56xm80fmg22768205")
    python_btn = types.InlineKeyboardButton("Python", "https://metanit.com/python/tutorial/1.1.php?ysclid=m56xq31e9e466155012")
    markup.row(python_btn, c_plus_btn)
    markup.row(java_btn, c_sharp_btn)
    if purchase_verification_by_user_id_and_title(callback.message.chat.id, "programingCourse").__len__() == 0:
        markup.add(types.InlineKeyboardButton("–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="send_by_programing_course"))
    bot.send_message(callback.message.chat.id, f"{username}, —Ç—ã –µ—â–µ –∑–¥–µ—Å—å?\n–ù—É... –í—ã–±–∏—Ä–∞–π —è–∑—ã–∫ –∏ –ø—Ä–æ—Ö–æ–¥–∏ –æ–±—É—á–µ–Ω–∏–µ.\n–î–µ–Ω–µ–≥ –≤–∏–¥–µ—Ç–µ–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç... –í–æ—Ç, –±–µ—Å–ø–ª–∞—Ç–Ω–æ!", reply_markup=markup)

def send_btn_designer_me(callback):
    username = callback.message.chat.first_name
    markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("Web-–î–∏–∑–∞–π–Ω–µ—Ä", "https://habr.com/ru/companies/lanit/articles/713708/")
    graphic_btn = types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä", "https://practicum.yandex.ru/blog/graphic-designer/")
    brand_btn = types.InlineKeyboardButton("–ë—Ä—ç–Ω–¥-–¥–∏–∑–∞–π–Ω–µ—Ä", "https://media.contented.ru/znaniya/professions/kto-takoj-brend-dizajner/?ysclid=m570bed9c0949571042")
    ui_ux_btn = types.InlineKeyboardButton("UI/UX –î–∏–∑–∞–π–Ω–µ—Ä", "https://www.uprock.ru/courses")
    markup.row(graphic_btn, web_btn)
    markup.row(ui_ux_btn, brand_btn)
    if purchase_verification_by_user_id_and_title(callback.message.chat.id, "designerCourse").__len__() == 0:
        markup.add(types.InlineKeyboardButton("–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="send_by_designer_course"))
    bot.send_message(callback.message.chat.id, f"{username}, —Ä–µ–∞–ª—å–Ω–æ?\n–û–∫–µ–π. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—É—Ä–æ—Å–æ–≤ –ø–æ—á—Ç–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∏ ;(.\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —á–µ–º –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∞—Ç—å!", reply_markup=markup)

def send_pretty_boy_me(callback):
    send_donation(callback)


def send_good_man_me(callback):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_list"))
    markup.add(types.InlineKeyboardButton("–ú–æ–∏ –∫—É—Ä—Å—ã", callback_data="my_courses"))
    bot.send_message(callback.message.chat.id, f"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –º–æ–π —Ö–æ–∑—è–∏–Ω.\n–¢—ã –¥—É–º–∞–ª, —è —Ç–∞–∫ —Å–∫–∞–∂—É? –°–æ–∑–¥–∞–ª –º–µ–Ω—è... –ò–¥–∏ –¥–≤–æ—Ä–∞–º–∏!\n–î–∞-–¥–∞-–¥–∞, —ç—Ç–æ –ü–∏—Ç–µ—Ä—Å–∫–∏–π —Å–ª—ç–Ω–≥.\n–ß—Ç–æ —Ç–µ–±–µ –Ω–∞–¥–æ? –í—ã–±–∏—Ä–∞–π –∏ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π!", reply_markup=markup)

def all_users_view(callback):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–µ–±—è", callback_data="delete_me"))

    message_all_users = ""
    for i in get_all_users():
        message_all_users += f"{i[0]} {i[1]} {i[2]} {i[3]}\n"
    bot.send_message(callback.message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_all_users().__len__()}.\n–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{message_all_users}", reply_markup=markup)

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ PreCheckoutQuery: {e}")

@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    user_id = message.from_user.id
    payment_id = message.successful_payment.provider_payment_charge_id
    amount = message.successful_payment.total_amount
    currency = message.successful_payment.currency

    bot.send_message(message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    global name_operation_sale
    if name_operation_sale == "programingCourse":
        insert_course(user_id,"–ö—É—Ä—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", payment_id)
    elif name_operation_sale == "designerCourse":
        insert_course(user_id,"–ö—É—Ä—Å –ø–æ –¥–∏–∑–∞–π–Ω—É", payment_id)

    save_payment(user_id, payment_id, amount, currency)

bot.polling(none_stop=True, interval=0)